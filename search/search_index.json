{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"German Wiktionary Extractor","text":"<p><code>de_wiktio</code> is a Python package designed to parse and extract data from the German Wiktionary. It enables users to access wikitext content either by fetching it directly online or by preprocessing and loading dump files locally for faster access. It can extract linguistic data such as parts of speech, inflections, examples, definitions, among others.</p> <p>This package can be thought of as a companion to the Hands-on Guide; all the steps and code covered in the guide are implemented here as a package. </p>"},{"location":"#installation","title":"Installation","text":"<p>The package was created using Python 11, so make sure that you have Python 11 or later. You can install the package from the my GitHub repo. The following code will install the package and its dependencies (i.e. <code>requests</code>, <code>lxml</code>, and <code>mwparserfromhell</code>):</p> <pre><code>pip install git+https://github.com/lennon-c/de_wiktio.git\n</code></pre>"},{"location":"#documentation","title":"Documentation","text":"<p>In the documentation site, you can find:</p> <ul> <li>Usage examples and </li> <li>The API documentation.  </li> </ul>"},{"location":"#the-story-behind-this-package","title":"The Story Behind This Package","text":"<p>I created this package as a personal project to extract inflection tables, which I use in my flashcard system for learning German.</p>"},{"location":"usage/","title":"Usage","text":""},{"location":"usage/#extracting-german-wiktionary-data","title":"Extracting German Wiktionary Data","text":"<p>There are two ways to fetch, parse, and extract wikitext content:</p> <ul> <li>By fetching content online:</li> </ul> <pre><code>from de_wiktio.entry import Entry\n\nentry = Entry.from_export('stark')\n</code></pre> <ul> <li>Or from your machine. This requires preprocessing the dump files from the German wiktionary and storing the information locally in a dictionary. See below for instructions. </li> </ul> <pre><code>entry = Entry.from_dump('stark')\n</code></pre> <p>Both methods above return an <code>Entry</code> object. From which,</p> <ul> <li>you can access the raw wikitext from the page.</li> </ul> SourceResult <pre><code>print('type = ',type(entry),'\\n') \nprint(entry.text[:500])\n</code></pre> <pre><code>type =  &lt;class 'de_wiktio.entry.Entry'&gt; \n\n{{Siehe auch|[[st\u00e6rk]], [[st\u00e4rk]]}}\n== stark ({{Sprache|Deutsch}}) ==\n=== {{Wortart|Adjektiv|Deutsch}} ===\n\n{{Deutsch Adjektiv \u00dcbersicht\n|Positiv=stark\n|Komparativ=st\u00e4rker\n|Superlativ=st\u00e4rksten\n|Bild 1=Weight lifting black and white.jpg|mini|1|eine ''starke'' [[Frau]] beim [[Gewichtheben]]\n|Bild 2=Agonis Flexuosa - bark.jpg|mini|3|ein ''starker'' [[Baumstamm]]\n|Bild 3=Snow pile (3123493946).jpg|mini|4|Es hat ''stark'' [[schneien|geschneit]].\n}}\n\n{{Worttrennung}}\n:stark, {{Komp.}} st\u00e4r\u00b7ker, {{Sup\n</code></pre> <ul> <li>explore the headings tree.</li> </ul> SourceResult <pre><code># For the whole page:\nentry.print_sections_tree()\n</code></pre> <pre><code>2  stark ({{Sprache|Deutsch}})\n    3  {{Wortart|Adjektiv|Deutsch}}\n        4  {{\u00dcbersetzungen}}\n2  stark ({{Sprache|Englisch}})\n    3  {{Wortart|Adjektiv|Englisch}}\n        4  {{\u00dcbersetzungen}}\n    3  {{Wortart|Adverb|Englisch}}\n        4  {{\u00dcbersetzungen}}\n2  stark ({{Sprache|Schwedisch}})\n    3  {{Wortart|Adjektiv|Schwedisch}}\n        4  {{\u00dcbersetzungen}}\n2  stark ({{Sprache|Deutsch}})\n    3  {{Wortart|Adjektiv|Deutsch}}\n        4  {{\u00dcbersetzungen}}\n</code></pre> SourceResult <pre><code># For the German section:\nentry.print_sections_tree(section=entry.german) \n</code></pre> <pre><code>2  stark ({{Sprache|Deutsch}})\n    3  {{Wortart|Adjektiv|Deutsch}}\n        4  {{\u00dcbersetzungen}}\n</code></pre> <p><code>Entry</code> objects extract additional information from the German section: </p> <ul> <li> The list of German word forms, using <code>entry.wordforms</code> Which returns a list of <code>WordForm</code> objects. </li> </ul> <p>SourceResult <pre><code>print(len(entry.wordforms))\n</code></pre> <pre><code>1\n</code></pre>  From a <code>WordForm</code> object, you can extract:</p> <ul> <li>The Part of the Speech</li> </ul> SourceResult <pre><code>wordform =  entry.wordforms[0]\nprint(f'{wordform.pos = }')\n</code></pre> <pre><code>wordform.pos = ['Adjektiv']\n</code></pre> <ul> <li>Word inflections for nouns, verbs, adjectives, and adverbs.</li> </ul> SourceResult <pre><code>wordform =  entry.wordforms[0]\ninflections = wordform.inflections()\nfor flexion in inflections:\n    for k,v in flexion.items():\n        print(f'{k} = {v}')\n    print()\n</code></pre> <pre><code>Positiv = stark\nKomparativ = st\u00e4rker\nSuperlativ = st\u00e4rksten\n</code></pre> <ul> <li> And other content, such as: <code>'Bedeutungen'</code> (meaning),<code>'Beispiele'</code> (examples), <code>'Synonyme'</code> (synonyms), <code>'Sprichw\u00f6rter'</code> (proverbs), among others. </li> </ul> SourceResult <pre><code>for content_type in ['Bedeutungen', 'Beispiele', 'Synonyme', 'Sprichw\u00f6rter']:\n    print(content_type.center(20, '-'))\n    content = wordform.other_content_extract(content_type)\n    print(content[:150], '\\n')\n</code></pre> <pre><code>----Bedeutungen-----\n[1] mit Kraft ausgestattet, von Kraft gepr\u00e4gt, zeugend\n[2] hohe Leistung erbringend; sehr leistungsf\u00e4hig\n[3] \u00e4u\u00dferen Einfl\u00fcssen, Belastungen standhalt \n\n-----Beispiele------\n[1] Er hat viele Muskeln \u2013 er ist stark.\n[1] Es weht ein starker Wind.\n[1] Ein starker Mann kann schwere Sachen tragen.\n[1] \u201eIndiz f\u00fcr den verbreitete \n\n------Synonyme------\n[1] kr\u00e4ftig, kraftvoll\n[2] effizient, leistungsf\u00e4hig, leistungsstark, wirksam\n[3] belastbar, dick, fest, robust, stabil, widerstandsf\u00e4hig\n[4] ausgepr\u00e4 \n\n----Sprichw\u00f6rter----\nWas dich nicht umbringt, macht dich st\u00e4rker\nDer Starke ist am m\u00e4chtigsten allein.Friedrich Schiller: Wilhelm Tell (1804) \n</code></pre>"},{"location":"usage/#working-with-dump-files","title":"Working with dump files","text":"<p>To work with a dump file, you need to create a dictionary of page titles and wikitexts pairs. For this you will need to:</p> <ol> <li>Download and decompress the Wiktionary dump file.  <ul> <li>You can download the latest version here or refer to instructions for downloading specific versions in this Hands-on Guide.</li> </ul> </li> <li>Specify the path to the decompressed file in <code>XML_FILE</code>.</li> <li>Specify the folder where the dictionary should be saved in <code>DICT_PATH</code>.</li> </ol> <p><pre><code># Specify your own paths\nXML_FILE = r'path\\to\\xml\\dewiktionary-20241020-pages-articles-multistream.xml'\nDICT_PATH = r'path\\to\\dict'\n</code></pre> The easiest way to get started is to set the path to the dictionary folder in <code>Settings</code>.</p> <ul> <li>This allows you to use the dump file data without repeatedly specifying the folder path.</li> </ul> <pre><code>from de_wiktio.settings import Settings\n\nSettings.set(key='DICT_PATH', value=DICT_PATH)\n</code></pre> <p>The next code will load and parse the XML dump file and create and save dictionaries to pickle files in the specified folder.</p> <p>To use the <code>Entry.from_dump</code> method, you need to create two dictionaries:</p> <ul> <li>one for the main content namespace (ns = <code>'0'</code>)</li> <li>another for the Flexion namespace (ns = <code>'108'</code>)</li> </ul> <p>Grab a cup of coffee and wait\u2014it might take a few minutes (between 4 and 5 minutes on my computer).</p> <p><pre><code>from de_wiktio.fetch import WikiDump\n\ndump = WikiDump(XML_FILE)\n_ = dump.create_dict_by_ns(ns='0')\n_ = dump.create_dict_by_ns(ns='108')\n</code></pre> You are now ready to work with <code>Entry</code> objects using the <code>from_dump</code> class method.</p> <ul> <li>The first <code>Entry</code> created during the session loads the dictionary, so it takes longer (around 9 to 11 seconds on my computer).</li> <li>From the second <code>Entry</code> onwards, <code>Entry.from_dump</code> accesses the dictionary from memory, making it faster than the first entry creation but also faster than fetching the content online using <code>from_export</code>.</li> </ul> SourceResult <pre><code>from de_wiktio.entry import Entry\n# First entry  \nentry = Entry.from_dump('stark')\nprint(type(entry))\n\n# Second entry\nentry = Entry.from_dump('hoch')\nprint(type(entry))\n</code></pre> <pre><code>&lt;class 'de_wiktio.entry.Entry'&gt;\n&lt;class 'de_wiktio.entry.Entry'&gt;\n</code></pre>"},{"location":"API/","title":"API","text":""},{"location":"API/#de_wiktio","title":"<code>de_wiktio</code>","text":"<p>Package to parse and extract data from the German Wiktionary. It allows users to access wikitext content, either by fetching it directly online or by preprocessing and loading dump files locally for faster access.</p> <p>Modules:</p> <ul> <li> <code>entry</code>           \u2013            <p>This module provides methods to parse wikitext and extract data from Wiktionary pages.</p> </li> <li> <code>fetch</code>           \u2013            <p>This module provides methods to fetch and parse XML files from the Wiktionary domain.</p> </li> <li> <code>settings</code>           \u2013            <p>Settings module.</p> </li> </ul>"},{"location":"API/entry/","title":"entry","text":""},{"location":"API/entry/#de_wiktio.entry","title":"<code>de_wiktio.entry</code>","text":"<p>This module provides methods to parse wikitext and extract data from Wiktionary pages.</p> <p>Classes:</p> <ul> <li> <code>Entry</code>           \u2013            <p>Entry class for parsing wikitext from main content pages (ns = <code>0</code>) of the German Wiktionary.   </p> </li> <li> <code>EntryFlexion</code>           \u2013            <p>Entry class for parsing wikitext from Flexion pages (ns = <code>108</code>).</p> </li> <li> <code>WordForm</code>           \u2013            <p>A class representing a word form.</p> </li> <li> <code>Tools</code>           \u2013            <p>Collection of utility functions.</p> </li> </ul>"},{"location":"API/entry/#de_wiktio.entry-classes","title":"Classes","text":""},{"location":"API/entry/#de_wiktio.entry.Entry","title":"<code>Entry(title, wikitext, status='OK', extracted_from=None)</code>","text":"<p>               Bases: <code>_EntryBase</code></p> <p>Entry class for parsing wikitext from main content pages (ns = <code>0</code>) of the German Wiktionary.   </p> <p>This class deals with the German section of the page, i.e. the German-to-German dictionary. Therefore, it does not parse multilingual entries, such as English-to-German, French-to-German, etc...</p> <p>Parameters:</p> <ul> <li> <code>title</code>               (<code>str</code>)           \u2013            <p>The title of the Wiktionary page.</p> </li> <li> <code>wikitext</code>               (<code>str</code>)           \u2013            <p>The raw wikitext of the page.</p> </li> <li> <code>status</code>               (<code>str</code>, default:                   <code>'OK'</code> )           \u2013            <p>The status of the entry.</p> </li> <li> <code>extracted_from</code>               (<code>str</code>, default:                   <code>None</code> )           \u2013            <p>The source of the extraction.</p> </li> </ul> <p>Methods:</p> <ul> <li> <code>from_export</code>             \u2013              <p>Create a class instance by fetching online the wiki page.</p> </li> <li> <code>from_dump</code>             \u2013              <p>Create a class instance by fetching the wikitext from local dictionary.</p> </li> <li> <code>get_wikidict</code>             \u2013              <p>Load the dictionary from the pickle file. </p> </li> <li> <code>print_sections_tree</code>             \u2013              <p>Print the headings tree.</p> </li> </ul> <p>Attributes:</p> <ul> <li> <code>WIKIDICT</code>               (<code>dict</code>)           \u2013            <p>Class attribute: Dictionary of title-wikitext pairs.</p> </li> <li> <code>title</code>               (<code>str</code>)           \u2013            <p>The title of the Wiktionary page.</p> </li> <li> <code>text</code>               (<code>str</code>)           \u2013            <p>The wikitext of the page.</p> </li> <li> <code>status</code>               (<code>str</code>)           \u2013            <p>The status of the parsing and extraction. </p> </li> <li> <code>extracted_from</code>               (<code>str</code>)           \u2013            <p>The source of the extraction. </p> </li> <li> <code>parsed</code>               (<code>Wikicode</code>)           \u2013            <p>The parsed wikitext of the page.</p> </li> <li> <code>NS</code>               (<code>str</code>)           \u2013            <p>Class attribute: The namespace of the entry, set to <code>'0'</code>.</p> </li> <li> <code>german</code>               (<code>Wikicode</code>)           \u2013            <p>The German section of the page.</p> </li> <li> <code>wordforms</code>               (<code>List[WordForm]</code>)           \u2013            <p>List of German word forms.</p> </li> </ul> Source code in <code>de_wiktio\\entry.py</code> <pre><code>def __init__(self, title: str, wikitext:str, status:str='OK', extracted_from:str =None) -&gt; None:\n    \"\"\"\n    The Entry class constructor.\n\n    Args:\n        title: The title of the Wiktionary page.\n        wikitext: The raw *wikitext* of the page.\n        status: The status of the entry.\n        extracted_from: The source of the extraction.\n    \"\"\"\n    super().__init__(title, wikitext, status, extracted_from)\n    self.german: Wikicode = self._get_section_de()\n    \"\"\"The German section of the page.\"\"\"\n</code></pre>"},{"location":"API/entry/#de_wiktio.entry.Entry-attributes","title":"Attributes","text":""},{"location":"API/entry/#de_wiktio.entry.Entry.WIKIDICT","title":"<code>WIKIDICT: dict</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>Class attribute: Dictionary of title-wikitext pairs.</p> <p>To be accessed when using the <code>from_dump</code> class method.  This is a lazy attribute. It loads the dictionary when needed. After that, it is kept in memory as a class attribute so that the dictionary is not loaded multiple times when using the <code>from_dump</code> class method to create a new <code>Entry</code> object.</p>"},{"location":"API/entry/#de_wiktio.entry.Entry.title","title":"<code>title: str = title</code>  <code>instance-attribute</code>","text":"<p>The title of the Wiktionary page.</p>"},{"location":"API/entry/#de_wiktio.entry.Entry.text","title":"<code>text: str = wikitext</code>  <code>instance-attribute</code>","text":"<p>The wikitext of the page.</p>"},{"location":"API/entry/#de_wiktio.entry.Entry.status","title":"<code>status: str = status</code>  <code>instance-attribute</code>","text":"<p>The status of the parsing and extraction. </p> <p>Some values are: 'OK', 'No content for {title} in exported page' or 'No proper wiki namespace found for {title}'</p>"},{"location":"API/entry/#de_wiktio.entry.Entry.extracted_from","title":"<code>extracted_from: str = extracted_from</code>  <code>instance-attribute</code>","text":"<p>The source of the extraction. </p> <p>The possible values are: 'from dump', 'from export' or <code>None</code>. A <code>None</code> value indicates that the instance was created directly from the constructor passing the wikitext and title of the page.</p>"},{"location":"API/entry/#de_wiktio.entry.Entry.parsed","title":"<code>parsed: Wikicode</code>  <code>property</code>","text":"<p>The parsed wikitext of the page.</p> <p>The wikitext is parsed using the <code>mwparserfromhell</code> library.</p>"},{"location":"API/entry/#de_wiktio.entry.Entry.NS","title":"<code>NS: str = '0'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>Class attribute: The namespace of the entry, set to <code>'0'</code>.</p>"},{"location":"API/entry/#de_wiktio.entry.Entry.german","title":"<code>german: Wikicode = self._get_section_de()</code>  <code>instance-attribute</code>","text":"<p>The German section of the page.</p>"},{"location":"API/entry/#de_wiktio.entry.Entry.wordforms","title":"<code>wordforms: List[WordForm]</code>  <code>property</code>","text":"<p>List of German word forms.</p>"},{"location":"API/entry/#de_wiktio.entry.Entry-functions","title":"Functions","text":""},{"location":"API/entry/#de_wiktio.entry.Entry.from_export","title":"<code>from_export(title)</code>  <code>classmethod</code>","text":"<p>Create a class instance by fetching online the wiki page.</p> <p>Parameters:</p> <ul> <li> <code>title</code>               (<code>str</code>)           \u2013            <p>The title of the Wiktionary page.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>Self</code>           \u2013            <p>An EntryBase or a subclass instance</p> </li> </ul> Source code in <code>de_wiktio\\entry.py</code> <pre><code>@classmethod\ndef from_export(cls, title: str) -&gt; Self:      \n    \"\"\"Create a class instance by fetching online the wiki page.\n\n    Args:\n        title: The title of the Wiktionary page.\n\n    Returns:\n        An EntryBase or a subclass instance\n    \"\"\"\n    fetched = PageExport(title)\n    wikitext = fetched.wikitext\n\n    if fetched.wikitext == '':\n        status = f'No content for {title} in exported page'\n    elif fetched.ns != cls.NS:\n        status = f'No proper wiki namespace found for {title}'\n        wikitext = ''\n    else:\n        status = 'OK'\n    return cls(title, wikitext, status,'from export')\n</code></pre>"},{"location":"API/entry/#de_wiktio.entry.Entry.from_dump","title":"<code>from_dump(title, dict_path=None)</code>  <code>classmethod</code>","text":"<p>Create a class instance by fetching the wikitext from local dictionary.</p> <p>During the session, only one dictionary is loaded. The dictionary is loaded from the pickle file <code>'wikidict_{*cls.NS*}.pkl'</code>, which is located in <code>dict_path</code>.  </p> <p>Parameters:</p> <ul> <li> <code>title</code>               (<code>str</code>)           \u2013            <p>The title of the Wiktionary page to fetch.</p> </li> <li> <code>dict_path</code>               (<code>Optional[str]</code>, default:                   <code>None</code> )           \u2013            <p>Path to the folder containing the dictionary. If <code>None</code>, the folder indicated in <code>Settings</code> will be used.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>Self</code>           \u2013            <p>An EntryBase or a subclass instance</p> </li> </ul> Source code in <code>de_wiktio\\entry.py</code> <pre><code>@classmethod\ndef from_dump(cls, title: str, dict_path: Optional[str] = None) -&gt; Self: \n    \"\"\"\n    Create a class instance by fetching the *wikitext* from local dictionary.\n\n    During the session, only one dictionary is loaded. The dictionary is loaded from the pickle file `'wikidict_{*cls.NS*}.pkl'`, which is located in `dict_path`.  \n\n    Args:\n        title: The title of the Wiktionary page to fetch.\n        dict_path: Path to the folder containing the dictionary. If `None`, the folder indicated in `Settings` will be used.\n\n    Returns:\n        An EntryBase or a subclass instance\n    \"\"\"\n    wikidict = cls.get_wikidict(dict_path)\n    wikitext = wikidict.get(title, '')\n    status = 'OK' if wikitext != '' else f'No content for {title} in dump file'\n    return cls(title, wikitext, status, 'from dump')\n</code></pre>"},{"location":"API/entry/#de_wiktio.entry.Entry.get_wikidict","title":"<code>get_wikidict(dict_path=None)</code>  <code>classmethod</code>","text":"<p>Load the dictionary from the pickle file. </p> <p>If the dictionary is already loaded, return the dictionary from memory. Per session, only one dictionary is loaded. The dictionary is loaded from the pickle file 'wikidict_{cls.NS}.pkl' in <code>dict_path</code> or in the folder indicated in <code>Settings</code> if <code>dict_path</code> is not provided.</p> <p>Parameters:</p> <ul> <li> <code>dict_path</code>               (<code>Optional[str]</code>, default:                   <code>None</code> )           \u2013            <p>Path to the folder containing the dictionary. If <code>None</code>, the folder indicated in <code>Settings</code> will be used.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>Dict[str, str]</code>           \u2013            <p>A dictionary with page titles as keys and their corresponding wikitext as values.</p> </li> </ul> Source code in <code>de_wiktio\\entry.py</code> <pre><code>@classmethod\ndef get_wikidict(cls, dict_path: Optional[str] = None) -&gt; Dict[str, str]:\n    \"\"\"\n    Load the dictionary from the pickle file. \n\n    If the dictionary is already loaded, return the dictionary from memory. Per session, only one dictionary is loaded. The dictionary is loaded from the pickle file 'wikidict_{*cls.NS*}.pkl' in `dict_path` or in the folder indicated in `Settings` if `dict_path` is not provided.\n\n    Args:\n        dict_path: Path to the folder containing the dictionary. If `None`, the folder indicated in `Settings` will be used.\n\n    Returns:\n        A dictionary with page titles as keys and their corresponding *wikitext* as values.\n    \"\"\"\n    # if the dictionary is already loaded, return it\n    if cls.WIKIDICT is not None:\n        return cls.WIKIDICT\n\n    # otherwise, load the dictionary\n    if dict_path is None:\n        cls.WIKIDICT = WikiDump.load_wikidict_by_ns(ns=cls.NS)\n    else:\n        _file = Path(dict_path) / f'wikidict_{cls.NS}.pkl'\n        cls.WIKIDICT = WikiDump.load_wikidict_by_ns(file=_file, ns=cls.NS)\n\n    return cls.WIKIDICT\n</code></pre>"},{"location":"API/entry/#de_wiktio.entry.Entry.print_sections_tree","title":"<code>print_sections_tree(section=None, level=2)</code>","text":"<p>Print the headings tree.</p> <p>Parameters:</p> <ul> <li> <code>section</code>               (<code>Optional[Wikicode]</code>, default:                   <code>None</code> )           \u2013            <p>The <code>Wikicode</code>section to start printing from. If not provided, prints the headings tree of the entire wikitext.</p> </li> <li> <code>level</code>               (<code>int</code>, default:                   <code>2</code> )           \u2013            <p>The initial heading level from where to start printing.</p> </li> </ul> Source code in <code>de_wiktio\\entry.py</code> <pre><code>def print_sections_tree(self, section: Optional[Wikicode] = None, level: int = 2) -&gt; None:\n    \"\"\"\n    Print the headings tree.\n\n    Args:\n        section: The `Wikicode`section to start printing from. If not provided, prints the headings tree of the entire wikitext.\n        level: The initial heading level from where to start printing.\n    \"\"\"\n    if section is None:\n        section = self.parsed\n\n    headings = section.filter_headings()\n    for heading in headings:\n        if level &lt;= heading.level:\n            print(' ' * 8 * (heading.level - level), heading.level, heading.title)\n</code></pre>"},{"location":"API/entry/#de_wiktio.entry.EntryFlexion","title":"<code>EntryFlexion(title, wikitext, status='OK', extracted_from=None)</code>","text":"<p>               Bases: <code>_EntryBase</code></p> <p>Entry class for parsing wikitext from Flexion pages (ns = <code>108</code>).</p> <p>Flexion pages hold the complete inflection tables for verbs and adjectives. These tables are referred to as Flexionseiten in the German Wiktionary. They are an extension of the inflection tables of the main content pages. </p> <p>This class deals with the German section of the page, i.e. the German-to-German dictionary. Therefore, it does not parse multilingual entries, such as English-to-German, French-to-German, etc...</p> <p>Parameters:</p> <ul> <li> <code>title</code>               (<code>str</code>)           \u2013            <p>The title of the Wiktionary page.</p> </li> <li> <code>wikitext</code>               (<code>str</code>)           \u2013            <p>The raw wikitext of the page.</p> </li> <li> <code>status</code>               (<code>str</code>, default:                   <code>'OK'</code> )           \u2013            <p>The status of the entry.</p> </li> <li> <code>extracted_from</code>               (<code>Optional[str]</code>, default:                   <code>None</code> )           \u2013            <p>The source of the extraction.</p> </li> </ul> <p>Methods:</p> <ul> <li> <code>from_export</code>             \u2013              <p>Create a class instance by fetching online the wiki page.</p> </li> <li> <code>from_dump</code>             \u2013              <p>Create a class instance by fetching the wikitext from local dictionary.</p> </li> <li> <code>get_wikidict</code>             \u2013              <p>Load the dictionary from the pickle file. </p> </li> <li> <code>print_sections_tree</code>             \u2013              <p>Print the headings tree.</p> </li> <li> <code>inflections</code>             \u2013              <p>Retrieve a list of dictionaries from the inflection templates.</p> </li> </ul> <p>Attributes:</p> <ul> <li> <code>WIKIDICT</code>               (<code>dict</code>)           \u2013            <p>Class attribute: Dictionary of title-wikitext pairs.</p> </li> <li> <code>title</code>               (<code>str</code>)           \u2013            <p>The title of the Wiktionary page.</p> </li> <li> <code>text</code>               (<code>str</code>)           \u2013            <p>The wikitext of the page.</p> </li> <li> <code>status</code>               (<code>str</code>)           \u2013            <p>The status of the parsing and extraction. </p> </li> <li> <code>extracted_from</code>               (<code>str</code>)           \u2013            <p>The source of the extraction. </p> </li> <li> <code>parsed</code>               (<code>Wikicode</code>)           \u2013            <p>The parsed wikitext of the page.</p> </li> <li> <code>NS</code>           \u2013            <p>Class attribute: The namespace of the entry, set to <code>'108'</code>.</p> </li> <li> <code>german</code>               (<code>Wikicode</code>)           \u2013            <p>The German section of the page.</p> </li> <li> <code>pos</code>               (<code>List[str]</code>)           \u2013            <p>List of German Part Of Speech (POS).</p> </li> <li> <code>flexion_tpls</code>               (<code>List[Template]</code>)           \u2013            <p>List of German flexion templates.</p> </li> </ul> Source code in <code>de_wiktio\\entry.py</code> <pre><code>def __init__(self, title: str, wikitext: str, status: str = 'OK', extracted_from: Optional[str] = None) -&gt; None:\n    \"\"\"\n    The EntryFlexion class constructor.\n\n    Args:\n        title: The title of the Wiktionary page.\n        wikitext: The raw *wikitext* of the page.\n        status: The status of the entry.\n        extracted_from: The source of the extraction.\n\n    \"\"\"\n    super().__init__(title, wikitext, status, extracted_from)\n    self.german: Wikicode = self._get_section_de()\n    \"\"\"The German section of the page.\"\"\"\n</code></pre>"},{"location":"API/entry/#de_wiktio.entry.EntryFlexion-attributes","title":"Attributes","text":""},{"location":"API/entry/#de_wiktio.entry.EntryFlexion.WIKIDICT","title":"<code>WIKIDICT: dict</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>Class attribute: Dictionary of title-wikitext pairs.</p> <p>To be accessed when using the <code>from_dump</code> class method.  This is a lazy attribute. It loads the dictionary when needed. After that, it is kept in memory as a class attribute so that the dictionary is not loaded multiple times when using the <code>from_dump</code> class method to create a new <code>Entry</code> object.</p>"},{"location":"API/entry/#de_wiktio.entry.EntryFlexion.title","title":"<code>title: str = title</code>  <code>instance-attribute</code>","text":"<p>The title of the Wiktionary page.</p>"},{"location":"API/entry/#de_wiktio.entry.EntryFlexion.text","title":"<code>text: str = wikitext</code>  <code>instance-attribute</code>","text":"<p>The wikitext of the page.</p>"},{"location":"API/entry/#de_wiktio.entry.EntryFlexion.status","title":"<code>status: str = status</code>  <code>instance-attribute</code>","text":"<p>The status of the parsing and extraction. </p> <p>Some values are: 'OK', 'No content for {title} in exported page' or 'No proper wiki namespace found for {title}'</p>"},{"location":"API/entry/#de_wiktio.entry.EntryFlexion.extracted_from","title":"<code>extracted_from: str = extracted_from</code>  <code>instance-attribute</code>","text":"<p>The source of the extraction. </p> <p>The possible values are: 'from dump', 'from export' or <code>None</code>. A <code>None</code> value indicates that the instance was created directly from the constructor passing the wikitext and title of the page.</p>"},{"location":"API/entry/#de_wiktio.entry.EntryFlexion.parsed","title":"<code>parsed: Wikicode</code>  <code>property</code>","text":"<p>The parsed wikitext of the page.</p> <p>The wikitext is parsed using the <code>mwparserfromhell</code> library.</p>"},{"location":"API/entry/#de_wiktio.entry.EntryFlexion.NS","title":"<code>NS = '108'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>Class attribute: The namespace of the entry, set to <code>'108'</code>.</p>"},{"location":"API/entry/#de_wiktio.entry.EntryFlexion.german","title":"<code>german: Wikicode = self._get_section_de()</code>  <code>instance-attribute</code>","text":"<p>The German section of the page.</p>"},{"location":"API/entry/#de_wiktio.entry.EntryFlexion.pos","title":"<code>pos: List[str]</code>  <code>property</code>","text":"<p>List of German Part Of Speech (POS).</p> <p>The POS are extracted from the name of the flexion templates in the body. The possible values are \"Adjektiv\", \"Verb\", \"Adverb\", \"Gerundivum\", or \"Numerale\".</p>"},{"location":"API/entry/#de_wiktio.entry.EntryFlexion.flexion_tpls","title":"<code>flexion_tpls: List[Template]</code>  <code>property</code>","text":"<p>List of German flexion templates.</p> <p>Templates are extracted from the body of the page.</p>"},{"location":"API/entry/#de_wiktio.entry.EntryFlexion-functions","title":"Functions","text":""},{"location":"API/entry/#de_wiktio.entry.EntryFlexion.from_export","title":"<code>from_export(title)</code>  <code>classmethod</code>","text":"<p>Create a class instance by fetching online the wiki page.</p> <p>Parameters:</p> <ul> <li> <code>title</code>               (<code>str</code>)           \u2013            <p>The title of the Wiktionary page.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>Self</code>           \u2013            <p>An EntryBase or a subclass instance</p> </li> </ul> Source code in <code>de_wiktio\\entry.py</code> <pre><code>@classmethod\ndef from_export(cls, title: str) -&gt; Self:      \n    \"\"\"Create a class instance by fetching online the wiki page.\n\n    Args:\n        title: The title of the Wiktionary page.\n\n    Returns:\n        An EntryBase or a subclass instance\n    \"\"\"\n    fetched = PageExport(title)\n    wikitext = fetched.wikitext\n\n    if fetched.wikitext == '':\n        status = f'No content for {title} in exported page'\n    elif fetched.ns != cls.NS:\n        status = f'No proper wiki namespace found for {title}'\n        wikitext = ''\n    else:\n        status = 'OK'\n    return cls(title, wikitext, status,'from export')\n</code></pre>"},{"location":"API/entry/#de_wiktio.entry.EntryFlexion.from_dump","title":"<code>from_dump(title, dict_path=None)</code>  <code>classmethod</code>","text":"<p>Create a class instance by fetching the wikitext from local dictionary.</p> <p>During the session, only one dictionary is loaded. The dictionary is loaded from the pickle file <code>'wikidict_{*cls.NS*}.pkl'</code>, which is located in <code>dict_path</code>.  </p> <p>Parameters:</p> <ul> <li> <code>title</code>               (<code>str</code>)           \u2013            <p>The title of the Wiktionary page to fetch.</p> </li> <li> <code>dict_path</code>               (<code>Optional[str]</code>, default:                   <code>None</code> )           \u2013            <p>Path to the folder containing the dictionary. If <code>None</code>, the folder indicated in <code>Settings</code> will be used.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>Self</code>           \u2013            <p>An EntryBase or a subclass instance</p> </li> </ul> Source code in <code>de_wiktio\\entry.py</code> <pre><code>@classmethod\ndef from_dump(cls, title: str, dict_path: Optional[str] = None) -&gt; Self: \n    \"\"\"\n    Create a class instance by fetching the *wikitext* from local dictionary.\n\n    During the session, only one dictionary is loaded. The dictionary is loaded from the pickle file `'wikidict_{*cls.NS*}.pkl'`, which is located in `dict_path`.  \n\n    Args:\n        title: The title of the Wiktionary page to fetch.\n        dict_path: Path to the folder containing the dictionary. If `None`, the folder indicated in `Settings` will be used.\n\n    Returns:\n        An EntryBase or a subclass instance\n    \"\"\"\n    wikidict = cls.get_wikidict(dict_path)\n    wikitext = wikidict.get(title, '')\n    status = 'OK' if wikitext != '' else f'No content for {title} in dump file'\n    return cls(title, wikitext, status, 'from dump')\n</code></pre>"},{"location":"API/entry/#de_wiktio.entry.EntryFlexion.get_wikidict","title":"<code>get_wikidict(dict_path=None)</code>  <code>classmethod</code>","text":"<p>Load the dictionary from the pickle file. </p> <p>If the dictionary is already loaded, return the dictionary from memory. Per session, only one dictionary is loaded. The dictionary is loaded from the pickle file 'wikidict_{cls.NS}.pkl' in <code>dict_path</code> or in the folder indicated in <code>Settings</code> if <code>dict_path</code> is not provided.</p> <p>Parameters:</p> <ul> <li> <code>dict_path</code>               (<code>Optional[str]</code>, default:                   <code>None</code> )           \u2013            <p>Path to the folder containing the dictionary. If <code>None</code>, the folder indicated in <code>Settings</code> will be used.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>Dict[str, str]</code>           \u2013            <p>A dictionary with page titles as keys and their corresponding wikitext as values.</p> </li> </ul> Source code in <code>de_wiktio\\entry.py</code> <pre><code>@classmethod\ndef get_wikidict(cls, dict_path: Optional[str] = None) -&gt; Dict[str, str]:\n    \"\"\"\n    Load the dictionary from the pickle file. \n\n    If the dictionary is already loaded, return the dictionary from memory. Per session, only one dictionary is loaded. The dictionary is loaded from the pickle file 'wikidict_{*cls.NS*}.pkl' in `dict_path` or in the folder indicated in `Settings` if `dict_path` is not provided.\n\n    Args:\n        dict_path: Path to the folder containing the dictionary. If `None`, the folder indicated in `Settings` will be used.\n\n    Returns:\n        A dictionary with page titles as keys and their corresponding *wikitext* as values.\n    \"\"\"\n    # if the dictionary is already loaded, return it\n    if cls.WIKIDICT is not None:\n        return cls.WIKIDICT\n\n    # otherwise, load the dictionary\n    if dict_path is None:\n        cls.WIKIDICT = WikiDump.load_wikidict_by_ns(ns=cls.NS)\n    else:\n        _file = Path(dict_path) / f'wikidict_{cls.NS}.pkl'\n        cls.WIKIDICT = WikiDump.load_wikidict_by_ns(file=_file, ns=cls.NS)\n\n    return cls.WIKIDICT\n</code></pre>"},{"location":"API/entry/#de_wiktio.entry.EntryFlexion.print_sections_tree","title":"<code>print_sections_tree(section=None, level=2)</code>","text":"<p>Print the headings tree.</p> <p>Parameters:</p> <ul> <li> <code>section</code>               (<code>Optional[Wikicode]</code>, default:                   <code>None</code> )           \u2013            <p>The <code>Wikicode</code>section to start printing from. If not provided, prints the headings tree of the entire wikitext.</p> </li> <li> <code>level</code>               (<code>int</code>, default:                   <code>2</code> )           \u2013            <p>The initial heading level from where to start printing.</p> </li> </ul> Source code in <code>de_wiktio\\entry.py</code> <pre><code>def print_sections_tree(self, section: Optional[Wikicode] = None, level: int = 2) -&gt; None:\n    \"\"\"\n    Print the headings tree.\n\n    Args:\n        section: The `Wikicode`section to start printing from. If not provided, prints the headings tree of the entire wikitext.\n        level: The initial heading level from where to start printing.\n    \"\"\"\n    if section is None:\n        section = self.parsed\n\n    headings = section.filter_headings()\n    for heading in headings:\n        if level &lt;= heading.level:\n            print(' ' * 8 * (heading.level - level), heading.level, heading.title)\n</code></pre>"},{"location":"API/entry/#de_wiktio.entry.EntryFlexion.inflections","title":"<code>inflections()</code>","text":"<p>Retrieve a list of dictionaries from the inflection templates.</p> <p>Returns:</p> <ul> <li> <code>List[Dict[str, str]]</code>           \u2013            <p>A list of dictionaries where each dictionary represents an inflection template.</p> </li> </ul> Source code in <code>de_wiktio\\entry.py</code> <pre><code>def inflections(self) -&gt; List[Dict[str, str]]:\n    \"\"\"Retrieve a list of dictionaries from the inflection templates.\n\n    Returns:\n        A list of dictionaries where each dictionary represents an inflection template.\n    \"\"\"\n    return [Tools.template_to_dict(template) for template in self.flexion_tpls]\n</code></pre>"},{"location":"API/entry/#de_wiktio.entry.WordForm","title":"<code>WordForm(wordform, entry=None)</code>","text":"<p>A class representing a word form.</p> Future work <ul> <li>Add translations</li> </ul> <p>Parameters:</p> <ul> <li> <code>wordform</code>               (<code>Wikicode</code>)           \u2013            <p>A Wikicode object containing the word form.</p> </li> </ul> <p>Methods:</p> <ul> <li> <code>inflections</code>             \u2013              <p>Retrieve a list of inflections of the word form from the main content page (ns = 0).</p> </li> <li> <code>inflections_extended</code>             \u2013              <p>List of dictionaries with the inflections templates from the Flexion pages (ns = 108).</p> </li> <li> <code>other_content_extract</code>             \u2013              <p>Extract other content such as <code>Bedeutungen</code>, <code>Beispiele</code>, <code>Synonyme</code>, or <code>Sprichw\u00f6rter</code>.</p> </li> </ul> <p>Attributes:</p> <ul> <li> <code>wordform</code>               (<code>Wikicode</code>)           \u2013            <p>A Wikicode object containing the word form.</p> </li> <li> <code>status</code>               (<code>str</code>)           \u2013            <p>The status of the word form.</p> </li> <li> <code>entry</code>               (<code>Entry</code>)           \u2013            <p>The <code>Entry</code> object to which the word form belongs.</p> </li> <li> <code>heading</code>               (<code>Heading</code>)           \u2013            <p>The heading of the word form.</p> </li> <li> <code>pos</code>               (<code>List[str]</code>)           \u2013            <p>List of Part Of Speech (POS) or empty list if no POS are found.</p> </li> <li> <code>wortart_tpls</code>               (<code>List[Template]</code>)           \u2013            <p>List of Wortart template objects. Returns an empty list if no Wortart template is found.</p> </li> <li> <code>\u00fcbersichten_tpls</code>               (<code>List[Template]</code>)           \u2013            <p>List of templates generating inflection tables (Flexionstabellen) in the main content page.</p> </li> </ul> Source code in <code>de_wiktio\\entry.py</code> <pre><code>def __init__(self, wordform: Wikicode, entry: Entry = None) -&gt; None:\n    \"\"\"The WordForm constructor.\n\n    Args:\n        wordform: A Wikicode object containing the word form.\n    \"\"\"\n    self.wordform: Wikicode = wordform\n    \"\"\"A Wikicode object containing the word form.\"\"\"\n    self.status: str = 'OK'\n    \"\"\"The status of the word form.\"\"\"\n    self.entry: Entry = entry\n    \"\"\"The `Entry` object to which the word form belongs.\"\"\"\n</code></pre>"},{"location":"API/entry/#de_wiktio.entry.WordForm-attributes","title":"Attributes","text":""},{"location":"API/entry/#de_wiktio.entry.WordForm.wordform","title":"<code>wordform: Wikicode = wordform</code>  <code>instance-attribute</code>","text":"<p>A Wikicode object containing the word form.</p>"},{"location":"API/entry/#de_wiktio.entry.WordForm.status","title":"<code>status: str = 'OK'</code>  <code>instance-attribute</code>","text":"<p>The status of the word form.</p>"},{"location":"API/entry/#de_wiktio.entry.WordForm.entry","title":"<code>entry: Entry = entry</code>  <code>instance-attribute</code>","text":"<p>The <code>Entry</code> object to which the word form belongs.</p>"},{"location":"API/entry/#de_wiktio.entry.WordForm.heading","title":"<code>heading: Heading</code>  <code>property</code>","text":"<p>The heading of the word form.</p>"},{"location":"API/entry/#de_wiktio.entry.WordForm.pos","title":"<code>pos: List[str]</code>  <code>property</code>","text":"<p>List of Part Of Speech (POS) or empty list if no POS are found.</p> <p>The POS are extracted from the Wortart templates of the word form.</p>"},{"location":"API/entry/#de_wiktio.entry.WordForm.wortart_tpls","title":"<code>wortart_tpls: List[Template]</code>  <code>property</code>","text":"<p>List of Wortart template objects. Returns an empty list if no Wortart template is found.</p> <p>Note: In principle, one would expect only one Wortart template per word form, but in practice, there can be more than one.</p>"},{"location":"API/entry/#de_wiktio.entry.WordForm.\u00fcbersichten_tpls","title":"<code>\u00fcbersichten_tpls: List[Template]</code>  <code>property</code>","text":"<p>List of templates generating inflection tables (Flexionstabellen) in the main content page.</p> <p>These tables provide a brief overview (\u00dcbersicht) of the word form's inflections. Full inflection tables can be found in the corresponding Flexionsseiten (Flexion wiki namespace).</p> <p>Note: Most word forms have either none or only one \u00dcbersicht template, but there are cases where they have more than one, such as for 'Mars' and 'Partikel'.</p>"},{"location":"API/entry/#de_wiktio.entry.WordForm-functions","title":"Functions","text":""},{"location":"API/entry/#de_wiktio.entry.WordForm.inflections","title":"<code>inflections(all=False)</code>","text":"<p>Retrieve a list of inflections of the word form from the main content page (ns = 0).</p> <p>The inflections are extracted from the \u00dcbersicht templates from the main content page.</p> <p>Parameters:</p> <ul> <li> <code>all</code>               (<code>bool</code>, default:                   <code>False</code> )           \u2013            <p>If <code>True</code>, all keys of the inflections templates are returned, otherwise keys relating to the image ('Bild') are removed.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>List[Dict[str, str]]</code>           \u2013            <p>A list of dictionaries, where each dictionary represents an inflection table. The keys of the dictionaries are the parameter names of the \u00dcbersicht template, and the values are the corresponding parameter values.</p> </li> </ul> Source code in <code>de_wiktio\\entry.py</code> <pre><code>def inflections(self, all: bool=False) -&gt; List[Dict[str, str]]:\n    \"\"\"\n    Retrieve a list of inflections of the word form from the main content page (ns = 0).\n\n    The inflections are extracted from the *\u00dcbersicht* templates from the main content page.\n\n    Args:\n        all: If `True`, all keys of the inflections templates are returned, otherwise keys relating to the image ('Bild') are removed.\n\n    Returns:\n        A list of dictionaries, where each dictionary represents an inflection table. The keys of the dictionaries are the parameter names of the *\u00dcbersicht* template, and the values are the corresponding parameter values.  \n    \"\"\"\n    flexions = [Tools.template_to_dict(template) for template in self.\u00fcbersichten_tpls]\n    if all:\n        return flexions\n    else:\n        return [{k:v for k,v in flexion.items() \n            if 'Bild' not in k  \n            and not k.isnumeric()} for flexion in flexions]\n</code></pre>"},{"location":"API/entry/#de_wiktio.entry.WordForm.inflections_extended","title":"<code>inflections_extended()</code>","text":"<p>List of dictionaries with the inflections templates from the Flexion pages (ns = 108).</p> <p>In general, this are small dictionaries, providing additional infomation for the contruction of extended inflection tables.</p> <p>Returns:</p> <ul> <li> <code>List[Dict[str, str]]</code>           \u2013            <p>A list of dictionaries, or an empty list if no inflection templates are found or the word form is not a verb or adjective.</p> </li> </ul> Source code in <code>de_wiktio\\entry.py</code> <pre><code>def inflections_extended(self) -&gt; List[Dict[str, str]]:\n    \"\"\"List of dictionaries with the inflections templates from the Flexion pages (ns = 108).\n\n    In general, this are small dictionaries, providing additional infomation for the contruction of extended inflection tables.\n\n    Returns: \n        A list of dictionaries, or an empty list if no inflection templates are found or the word form is not a verb or adjective.\n    \"\"\"\n    if self._flexionseite:\n        return self._flexionseite.inflections()\n    else:\n        return []\n</code></pre>"},{"location":"API/entry/#de_wiktio.entry.WordForm.other_content_extract","title":"<code>other_content_extract(name, strip_code=True, strip_kw=None)</code>","text":"<p>Extract other content such as <code>Bedeutungen</code>, <code>Beispiele</code>, <code>Synonyme</code>, or <code>Sprichw\u00f6rter</code>.</p> <p>Extracts other types of content which are located within the word form section of the page in separate paragraphs. The first line of the paragraph includes only a template without parameters, whose name is the type of content to extract. The content is extracted from the second line until the end of the paragraph.</p> <p>Parameters:</p> <ul> <li> <code>name</code>               (<code>str</code>)           \u2013            <p>The name of the template to extract content from. i.e. \"Bedeutungen\", \"Beispiele\", \"Synonyme\", or \"Sprichw\u00f6rter\", or any other template name that follows the same pattern.</p> </li> <li> <code>strip_code</code>               (<code>bool</code>, default:                   <code>True</code> )           \u2013            <p>Whether to strip wikitext code from the extracted content and return plain text.</p> </li> <li> <code>strip_kw</code>               (<code>Optional[Dict[str, str]]</code>, default:                   <code>None</code> )           \u2013            <p>A dictionary of keyword arguments to pass to <code>strip_code</code> method of <code>mwparserfromhell.nodes.Wikicode</code> objects.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>str</code>           \u2013            <p>The extracted content, either as plain text or raw wikitext.</p> </li> </ul> Source code in <code>de_wiktio\\entry.py</code> <pre><code>def other_content_extract(self, name: str, strip_code: bool = True, strip_kw: Optional[Dict[str, str]] = None) -&gt; str:\n    \"\"\"Extract other content such as `Bedeutungen`, `Beispiele`, `Synonyme`, or `Sprichw\u00f6rter`.\n\n    Extracts other types of content which are located within the word form section of the page in separate paragraphs. The first line of the paragraph includes only a template without parameters, whose name is the type of content to extract. The content is extracted from the second line until the end of the paragraph.\n\n    Args:\n        name: The name of the template to extract content from. i.e. \"Bedeutungen\", \"Beispiele\", \"Synonyme\", or \"Sprichw\u00f6rter\", or any other template name that follows the same pattern.\n        strip_code: Whether to strip *wikitext* code from the extracted content and return plain text.\n        strip_kw: A dictionary of keyword arguments to pass to `strip_code` method of [`mwparserfromhell.nodes.Wikicode`][mwparserfromhell.wikicode.Wikicode.strip_code] objects.\n\n    Returns:\n        The extracted content, either as plain text or raw *wikitext*.\n    \"\"\"\n    text = str(self.wordform)\n    pattern = r'\\n\\n\\{\\{' + name + r'\\}\\}\\n(.+?)\\n\\n'\n    search = re.search(pattern, text, re.DOTALL)\n\n    if search is None:\n        return  \n\n    content = search.group(1)\n\n    if strip_code:\n        if strip_kw is not None:\n            content = mwparserfromhell.parse(content).strip_code(**strip_kw)\n        else:\n            content = mwparserfromhell.parse(content).strip_code()\n\n    return content\n</code></pre>"},{"location":"API/entry/#de_wiktio.entry.Tools","title":"<code>Tools</code>","text":"<p>Collection of utility functions.</p> <p>Methods:</p> <ul> <li> <code>template_to_dict</code>             \u2013              <p>Get dictionary of paramenters from template object.</p> </li> </ul>"},{"location":"API/entry/#de_wiktio.entry.Tools-functions","title":"Functions","text":""},{"location":"API/entry/#de_wiktio.entry.Tools.template_to_dict","title":"<code>template_to_dict(template)</code>  <code>staticmethod</code>","text":"<p>Get dictionary of paramenters from template object.</p> <p>Although templates objects have many functionalities similar to dictionaries, they do not return values as strings, but as objects. This function converts these objects to a dictionary of strings.</p> <p>Parameters:</p> <ul> <li> <code>template</code>               (<code>Template</code>)           \u2013            <p>A <code>Template</code> object.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>Dict[str, str]</code>           \u2013            <p>A dictionary of the template object.</p> </li> </ul> Source code in <code>de_wiktio\\entry.py</code> <pre><code>@staticmethod\ndef template_to_dict(template: Template) -&gt; Dict[str, str]:\n   \"\"\"Get dictionary of paramenters from template object.\n\n   Although templates objects have many functionalities similar to dictionaries, they do not return values as strings, but as objects. This function converts these objects to a dictionary of strings.\n\n   Args:\n       template: A `Template` object.\n\n   Returns:\n       A dictionary of the template object.\n   \"\"\"\n   params = {str(p.name).strip():str(p.value).strip() \n             for p in template.params}\n   return params\n</code></pre>"},{"location":"API/fetch/","title":"fetch","text":""},{"location":"API/fetch/#de_wiktio.fetch","title":"<code>de_wiktio.fetch</code>","text":"<p>This module provides methods to fetch and parse XML files from the Wiktionary domain.</p> <p>Classes:</p> <ul> <li> <code>WikiDump</code>           \u2013            <p>This class provides methods to parse and process the XML dump file. It also creates and loads dictionaries of title-wikitext pairs.</p> </li> <li> <code>PageExport</code>           \u2013            <p>This class provides methods to fetch and parse the XML content of a Wiktionary page and to extract the wikitext using the export tool (Spezial:Exportieren).</p> </li> </ul> <p>Functions:</p> <ul> <li> <code>fetch_page_Action_API</code>             \u2013              <p>Fetch online and return the XML content of a Wiktionary page for the given title using the Action API.</p> </li> <li> <code>print_tags_tree</code>             \u2013              <p>Print the tags tree of an XML <code>Element</code> object.</p> </li> </ul>"},{"location":"API/fetch/#de_wiktio.fetch-classes","title":"Classes","text":""},{"location":"API/fetch/#de_wiktio.fetch.WikiDump","title":"<code>WikiDump(xml_path=None)</code>","text":"<p>This class provides methods to parse and process the XML dump file. It also creates and loads dictionaries of title-wikitext pairs.</p> <p>Parameters:</p> <ul> <li> <code>xml_path</code>               (<code>str</code>, default:                   <code>None</code> )           \u2013            <p>Path to the XML dump file to be processed. If <code>None</code>, the path indicated in Settings will be used.</p> </li> </ul> <p>Methods:</p> <ul> <li> <code>pages_by_ns</code>             \u2013              <p>Retrieve pages matching the Wiki namespace <code>ns</code>. </p> </li> <li> <code>create_dict_by_ns</code>             \u2013              <p>Create a dictionary with titles as keys and the corresponding wikitext as values and saves it to a pickle file.</p> </li> <li> <code>load_wikidict_by_ns</code>             \u2013              <p>Load a dictionary with page titles as keys and their corresponding wikitext as values from a pickle file.</p> </li> </ul> <p>Attributes:</p> <ul> <li> <code>settings</code>               (<code>Settings</code>)           \u2013            <p>The <code>Settings</code> object.</p> </li> <li> <code>xml_path</code>               (<code>Path</code>)           \u2013            <p>Path to the XML dump file to be processed.</p> </li> <li> <code>tree</code>               (<code>_ElementTree</code>)           \u2013            <p>The lxml tree object from the XML file.</p> </li> <li> <code>root</code>               (<code>Element</code>)           \u2013            <p>The root element of the tree.</p> </li> <li> <code>namespaces</code>               (<code>Dict[str, str]</code>)           \u2013            <p>Dictionary of XML namespaces of the root element.</p> </li> <li> <code>pages</code>               (<code>List[Element]</code>)           \u2013            <p>List of all page elements from the XML file.</p> </li> </ul> Source code in <code>de_wiktio\\fetch.py</code> <pre><code>def __init__(self, xml_path: str = None):\n    \"\"\"\n    WikiDump object constructor.\n\n    Args:\n        xml_path: Path to the XML dump file to be processed. If `None`, the path indicated in Settings will be used. \n    \"\"\"\n    if xml_path is None:\n        xml_path = WikiDump.settings.get('XML_FILE')\n        if xml_path is None:\n            raise ValueError(\"Path not provided. Please provide a valid path to the XML file or set a valid XML_FILE in Settings\")\n\n    if not Path(xml_path).exists():\n        raise FileNotFoundError(f\"File not found: {xml_path}. Please provide a valid path or set a valid XML_FILE in Settings\") \n\n    self.xml_path= Path(xml_path)\n\n    # Instance attributes docstring \n    self.xml_path: Path\n    \"Path to the XML dump file to be processed.\"\n</code></pre>"},{"location":"API/fetch/#de_wiktio.fetch.WikiDump-attributes","title":"Attributes","text":""},{"location":"API/fetch/#de_wiktio.fetch.WikiDump.settings","title":"<code>settings: Settings = Settings()</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>The <code>Settings</code> object.</p>"},{"location":"API/fetch/#de_wiktio.fetch.WikiDump.xml_path","title":"<code>xml_path: Path</code>  <code>instance-attribute</code>","text":"<p>Path to the XML dump file to be processed.</p>"},{"location":"API/fetch/#de_wiktio.fetch.WikiDump.tree","title":"<code>tree: ET._ElementTree</code>  <code>property</code>","text":"<p>The lxml tree object from the XML file.</p> <p>Lazy evaluation. This is a time consuming operation, so it is only computed when needed.</p>"},{"location":"API/fetch/#de_wiktio.fetch.WikiDump.root","title":"<code>root: ET.Element</code>  <code>property</code>","text":"<p>The root element of the tree.</p> <p>Lazy evaluation. This is a time consuming operation, so it is only computed when needed.</p>"},{"location":"API/fetch/#de_wiktio.fetch.WikiDump.namespaces","title":"<code>namespaces: Dict[str, str]</code>  <code>property</code>","text":"<p>Dictionary of XML namespaces of the root element.</p>"},{"location":"API/fetch/#de_wiktio.fetch.WikiDump.pages","title":"<code>pages: List[ET.Element]</code>  <code>property</code>","text":"<p>List of all page elements from the XML file.</p> <p>This includes all pages from all wiki namespaces. Lazy evaluation. This is a time consuming operation, so it is only computed when needed.</p>"},{"location":"API/fetch/#de_wiktio.fetch.WikiDump-functions","title":"Functions","text":""},{"location":"API/fetch/#de_wiktio.fetch.WikiDump.pages_by_ns","title":"<code>pages_by_ns(ns)</code>","text":"<p>Retrieve pages matching the Wiki namespace <code>ns</code>. </p> <p>Parameters:</p> <ul> <li> <code>ns</code>               (<code>str</code>)           \u2013            <p>The Wiki namespace identifier to filter pages (e.g., '0' for content pages, '108' for Flexion pages).</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>List[Element]</code>           \u2013            <p>A list of page elements.</p> </li> </ul> Source code in <code>de_wiktio\\fetch.py</code> <pre><code>def pages_by_ns(self, ns: str) -&gt; List[ET.Element]:\n    \"\"\"\n    Retrieve pages matching the Wiki namespace `ns`. \n\n    Args:\n        ns: The Wiki namespace identifier to filter pages (e.g., '0' for content pages, '108' for Flexion pages).\n\n    Returns:\n        A list of page elements.\n    \"\"\"\n    elements = list()\n    for p in self.pages:\n        element = p.find('ns', namespaces=self.namespaces)\n        if element.text == ns: \n            elements.append(p)\n    return elements\n</code></pre>"},{"location":"API/fetch/#de_wiktio.fetch.WikiDump.create_dict_by_ns","title":"<code>create_dict_by_ns(ns, dict_path=None)</code>","text":"<p>Create a dictionary with titles as keys and the corresponding wikitext as values and saves it to a pickle file.</p> <p>Parameters:</p> <ul> <li> <code>ns</code>               (<code>str</code>)           \u2013            <p>The Wiki namespace identifier to filter pages (e.g., <code>'0'</code> for content pages, <code>'108'</code> for Flexion pages)</p> </li> <li> <code>dict_path</code>               (<code>str</code>, default:                   <code>None</code> )           \u2013            <p>The path where the dictionary should be saved. If not provided, the dictionary will be saved as 'wikidict_{ns}.pkl' in the folder indicated in Settings.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>Dict[str, str]</code>           \u2013            <p>A dictionary with page titles as keys and their corresponding wikitext as values.</p> </li> </ul> Source code in <code>de_wiktio\\fetch.py</code> <pre><code>def create_dict_by_ns(self, ns: str, dict_path: str = None) -&gt; Dict[str, str]:\n    \"\"\"\n    Create a dictionary with titles as keys and the corresponding *wikitext* as values and saves it to a pickle file.\n\n    Args:\n        ns: The Wiki namespace identifier to filter pages (e.g., `'0'` for content pages, `'108'` for Flexion pages)\n        dict_path: The path where the dictionary should be saved. If not provided, the dictionary will be saved as 'wikidict_{ns}.pkl' in the folder indicated in Settings.\n\n    Returns:\n        A dictionary with page titles as keys and their corresponding *wikitext* as values.\n    \"\"\"\n    if dict_path is None:\n        dict_path = WikiDump.settings.get('DICT_PATH')\n        if dict_path is None:\n            raise ValueError(\"Path not provided. Please provide a valid path to the dictionary or set a valid DICT_PATH in Settings\")\n\n    dict_path = Path(dict_path)\n\n    if not dict_path.exists():\n        raise FileNotFoundError(f\"Folder not found: {dict_path}. Please provide a valid path or set a valid DICT_PATH in Settings\")\n\n    pages = self.pages_by_ns(ns)\n    dic = dict()\n    for p in pages:\n        title = p.find('title', namespaces=self.namespaces)\n        wikitext = p.find('revision/text', namespaces=self.namespaces)\n        dic[title.text] = wikitext.text\n\n    dict_file = dict_path / f'wikidict_{ns}.pkl'\n\n    with open(dict_file, 'wb') as f:\n        pickle.dump(dic, f)\n    return dic\n</code></pre>"},{"location":"API/fetch/#de_wiktio.fetch.WikiDump.load_wikidict_by_ns","title":"<code>load_wikidict_by_ns(file=None, ns='0')</code>  <code>classmethod</code>","text":"<p>Load a dictionary with page titles as keys and their corresponding wikitext as values from a pickle file.</p> <p>Parameters:</p> <ul> <li> <code>file</code>               (<code>str</code>, default:                   <code>None</code> )           \u2013            <p>The path to the pickle file. If <code>None</code>, the file 'wikidict_{ns}.pkl' in the folder indicated in Settings will be used.        </p> </li> <li> <code>ns</code>               (<code>str</code>, default:                   <code>'0'</code> )           \u2013            <p>The wikinamespace identifier to filter pages (e.g., <code>'0'</code> for content pages, <code>'108'</code> for Flexion pages). </p> </li> </ul> <p>Returns:</p> <ul> <li> <code>Dict[str, str]</code>           \u2013            <p>A dictionary with page titles as keys and their corresponding wikitext as values.</p> </li> </ul> <p>Raises:</p> <ul> <li> <code>FileNotFoundError</code>             \u2013            <p>If the file does not exist.</p> </li> </ul> Source code in <code>de_wiktio\\fetch.py</code> <pre><code>@classmethod\ndef load_wikidict_by_ns(cls, file: str = None, ns: str = '0') -&gt; Dict[str, str]:\n    \"\"\"\n    Load a dictionary with page titles as keys and their corresponding *wikitext* as values from a pickle file.\n\n    Args:\n        file: The path to the pickle file. If `None`, the file 'wikidict_{ns}.pkl' in the folder indicated in Settings will be used.\t\n        ns: The wikinamespace identifier to filter pages (e.g., `'0'` for content pages, `'108'` for Flexion pages). \n\n    Returns:\n        A dictionary with page titles as keys and their corresponding *wikitext* as values.\n\n    Raises:\n        FileNotFoundError: If the file does not exist.\n    \"\"\"\n    if file is None:\n        dict_path = cls.settings.get('DICT_PATH')\n        # print(type(dict_path))\n        if dict_path is None:\n            raise ValueError(\"Path not provided. Please provide a valid path to the dictionary or set a valid DICT_PATH in Settings\")\n        else:\n            file = Path(dict_path) / f'wikidict_{ns}.pkl'\n    else:\n        file = Path(file)\n\n    if not file.exists():\n        raise FileNotFoundError(f\"The file {file} does not exist. Please create it first using the 'create_dict_by_ns' method.\")\n\n    with open(file, 'rb') as f:\n        dic = pickle.load(f)\n    return dic\n</code></pre>"},{"location":"API/fetch/#de_wiktio.fetch.PageExport","title":"<code>PageExport(title)</code>","text":"<p>This class provides methods to fetch and parse the XML content of a Wiktionary page and to extract the wikitext using the export tool (Spezial:Exportieren).</p> <p>Parameters:</p> <ul> <li> <code>title</code>               (<code>str</code>)           \u2013            <p>The title of the Wiktionary page to fetch.</p> </li> </ul> <p>Raises:</p> <ul> <li> <code>RequestException</code>             \u2013            <p>If the request fails.</p> </li> </ul> <p>Methods:</p> <ul> <li> <code>fetch</code>             \u2013              <p>Fetch and return the XML content of a Wiktionary page using the export tool.</p> </li> </ul> <p>Attributes:</p> <ul> <li> <code>title</code>               (<code>str</code>)           \u2013            <p>The title of the Wiktionary page to fetch.</p> </li> <li> <code>xml</code>               (<code>bytes</code>)           \u2013            <p>The XML content of the requested Wiktionary page.</p> </li> <li> <code>root</code>               (<code>Element</code>)           \u2013            <p>The root element of the tree.</p> </li> <li> <code>namespaces</code>               (<code>Dict[str, str]</code>)           \u2013            <p>Dictionary of XML namespaces of the root element.</p> </li> <li> <code>page</code>               (<code>Element</code>)           \u2013            <p>The page element.</p> </li> <li> <code>wikitext</code>               (<code>str</code>)           \u2013            <p>The wikitext of the page as a string.</p> </li> <li> <code>ns</code>               (<code>str</code>)           \u2013            <p>The Wiki namespace of the page as a string.</p> </li> </ul> Source code in <code>de_wiktio\\fetch.py</code> <pre><code>def __init__(self, title: str) -&gt; None:\n    \"\"\"\"\n    Initialize the PageExport class.\n\n    Args:\n        title: The title of the Wiktionary page to fetch.\n\n    Raises:\n        requests.exceptions.RequestException: If the request fails.\n    \"\"\"\n    self.title: str = title\n    self.xml = self.fetch()\n    self.root = ET.fromstring(self.xml)\n    self.namespaces = self.root.nsmap \n\n    # Instance attributes docstring \n    self.title: str\n    \"The title of the Wiktionary page to fetch.\"\n    self.xml: bytes\n    \"The XML content of the requested Wiktionary page.\"\n    self.root: ET.Element\n    \"The root element of the tree.\"\n    self.namespaces: Dict[str, str]\n    \"Dictionary of XML namespaces of the root element.\"\n</code></pre>"},{"location":"API/fetch/#de_wiktio.fetch.PageExport-attributes","title":"Attributes","text":""},{"location":"API/fetch/#de_wiktio.fetch.PageExport.title","title":"<code>title: str</code>  <code>instance-attribute</code>","text":"<p>The title of the Wiktionary page to fetch.</p>"},{"location":"API/fetch/#de_wiktio.fetch.PageExport.xml","title":"<code>xml: bytes</code>  <code>instance-attribute</code>","text":"<p>The XML content of the requested Wiktionary page.</p>"},{"location":"API/fetch/#de_wiktio.fetch.PageExport.root","title":"<code>root: ET.Element</code>  <code>instance-attribute</code>","text":"<p>The root element of the tree.</p>"},{"location":"API/fetch/#de_wiktio.fetch.PageExport.namespaces","title":"<code>namespaces: Dict[str, str]</code>  <code>instance-attribute</code>","text":"<p>Dictionary of XML namespaces of the root element.</p>"},{"location":"API/fetch/#de_wiktio.fetch.PageExport.page","title":"<code>page: ET.Element</code>  <code>property</code>","text":"<p>The page element.</p>"},{"location":"API/fetch/#de_wiktio.fetch.PageExport.wikitext","title":"<code>wikitext: str</code>  <code>property</code>","text":"<p>The wikitext of the page as a string.</p> <p>If not found, an empty string is returned.</p>"},{"location":"API/fetch/#de_wiktio.fetch.PageExport.ns","title":"<code>ns: str</code>  <code>property</code>","text":"<p>The Wiki namespace of the page as a string.</p> <p>If not found, an empty string is returned.</p>"},{"location":"API/fetch/#de_wiktio.fetch.PageExport-functions","title":"Functions","text":""},{"location":"API/fetch/#de_wiktio.fetch.PageExport.fetch","title":"<code>fetch()</code>","text":"<p>Fetch and return the XML content of a Wiktionary page using the export tool.</p> <p>The XML data is retrieved using the following URL: <code>https://de.wiktionary.org/wiki/Spezial:Exportieren/{self.title}</code></p> <p>Returns:</p> <ul> <li> <code>bytes</code>           \u2013            <p>the response.content - The XML content of the requested Wiktionary page.</p> </li> </ul> <p>Raises:</p> <ul> <li> <code>RequestException</code>             \u2013            <p>If the request fails.</p> </li> </ul> Source code in <code>de_wiktio\\fetch.py</code> <pre><code>def fetch(self) -&gt; bytes:\n    \"\"\"\n    Fetch and return the XML content of a Wiktionary page using the export tool.\n\n    The XML data is retrieved using the following URL:\n    `https://de.wiktionary.org/wiki/Spezial:Exportieren/{self.title}`\n\n\n    Returns:\n        the response.content - The XML content of the requested Wiktionary page.\n\n    Raises:\n        requests.exceptions.RequestException: If the request fails.\n    \"\"\"\n    url = f'https://de.wiktionary.org/wiki/Spezial:Exportieren/{self.title}'\n    resp = requests.get(url)\n    resp.raise_for_status()\n    return resp.content \n</code></pre>"},{"location":"API/fetch/#de_wiktio.fetch-functions","title":"Functions","text":""},{"location":"API/fetch/#de_wiktio.fetch.fetch_page_Action_API","title":"<code>fetch_page_Action_API(title)</code>","text":"<p>Fetch online and return the XML content of a Wiktionary page for the given title using the Action API.</p> <p>The XML data is retrieved from base URL: <code>https://de.wiktionary.org/w/api.php</code></p> <p>Parameters:</p> <ul> <li> <code>title</code>               (<code>str</code>)           \u2013            <p>The title of the Wiktionary page to fetch.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>bytes</code> (              <code>bytes</code> )          \u2013            <p>The XML content of the requested Wiktionary page.</p> </li> </ul> Source code in <code>de_wiktio\\fetch.py</code> <pre><code>def fetch_page_Action_API(title:str)-&gt; bytes:\n    \"\"\"Fetch online and return the XML content of a Wiktionary page for the given title using the Action API.\n\n    The XML data is retrieved from base URL:\n    `https://de.wiktionary.org/w/api.php`\n\n    Args:\n        title: The title of the Wiktionary page to fetch.\n\n    Returns:\n        bytes: The XML content of the requested Wiktionary page.\n    \"\"\"\n    url = \"https://de.wiktionary.org/w/api.php\"\n\n    params = {\n        \"titles\": title,\n        \"action\": \"query\",\n        \"export\": 1,\n        \"exportnowrap\": 1\n    }\n\n    resp = requests.get(url=url, params=params)\n    return resp.content\n</code></pre>"},{"location":"API/fetch/#de_wiktio.fetch.print_tags_tree","title":"<code>print_tags_tree(elem, only_tagnames=False, max_children=5, max_level=5, _level=0)</code>","text":"<p>Print the tags tree of an XML <code>Element</code> object.</p> <p>Parameters:</p> <ul> <li> <code>elem</code>               (<code>Element</code>)           \u2013            <p>The XML <code>Element</code> object to print.</p> </li> <li> <code>only_tagnames</code>               (<code>bool</code>, default:                   <code>False</code> )           \u2013            <p>If True, only print the tag name without the namespace.</p> </li> <li> <code>max_children</code>               (<code>int</code>, default:                   <code>5</code> )           \u2013            <p>The maximum number of children of the root element to print.</p> </li> <li> <code>max_level</code>               (<code>int</code>, default:                   <code>5</code> )           \u2013            <p>The maximum depth of the tree to print.</p> </li> <li> <code>_level</code>               (<code>int</code>, default:                   <code>0</code> )           \u2013            <p>Set to 0 by default. Required for recursion, not to be used by the user.</p> </li> </ul> Source code in <code>de_wiktio\\fetch.py</code> <pre><code>def print_tags_tree(\n    elem: ET.Element,\n    only_tagnames: bool = False,\n    max_children: int = 5,\n    max_level: int = 5,\n    _level: int = 0\n) -&gt; None:\n    \"\"\"Print the tags tree of an XML `Element` object.\n\n    Args:\n        elem: The XML `Element` object to print.\n        only_tagnames: If True, only print the tag name without the namespace.\n        max_children: The maximum number of children of the root element to print.\n        max_level: The maximum depth of the tree to print.\n        _level: Set to 0 by default. Required for recursion, not to be used by the user.\n    \"\"\"\n    tagname = ET.QName(elem).localname if only_tagnames else elem.tag\n    print(\" \" * 5 * _level, _level, tagname)\n\n    # Restrict depth\n    if _level + 1 &lt;= max_level:\n        for child_index, child in enumerate(elem):\n            print_tags_tree(child, _level + 1, only_tagnames, max_children, max_level)\n            # Limit number of children of the root element\n            if _level == 0 and child_index == max_children - 1:\n                break\n</code></pre>"},{"location":"API/settings/","title":"settings","text":""},{"location":"API/settings/#de_wiktio.settings","title":"<code>de_wiktio.settings</code>","text":"<p>Settings module.</p> <p>Classes:</p> <ul> <li> <code>Settings</code>           \u2013            <p>Settings class for the de_wiktio package.</p> </li> </ul>"},{"location":"API/settings/#de_wiktio.settings-classes","title":"Classes","text":""},{"location":"API/settings/#de_wiktio.settings.Settings","title":"<code>Settings</code>","text":"<p>Settings class for the de_wiktio package.</p> <p>Allowed keys:  - <code>XML_FILE</code>, for path to the XML dump file  - <code>DICT_PATH</code>, for path to the dictionary folder </p> <p>Settings are saved in the <code>config.json</code> file in the package folder.  If the configuration file does not exist, it will be created when <code>get</code> or <code>set</code> methods are called.</p> <p>Methods:</p> <ul> <li> <code>get</code>             \u2013              <p>Get a value from the configuration file.</p> </li> <li> <code>set</code>             \u2013              <p>Set a value in the configuration file.</p> </li> </ul>"},{"location":"API/settings/#de_wiktio.settings.Settings-functions","title":"Functions","text":""},{"location":"API/settings/#de_wiktio.settings.Settings.get","title":"<code>get(key, default=None)</code>  <code>classmethod</code>","text":"<p>Get a value from the configuration file.</p> <p>Allowed keys are: <code>XML_FILE</code>, <code>DICT_PATH</code>.</p> Source code in <code>de_wiktio\\settings.py</code> <pre><code>@classmethod\ndef get(cls, key, default=None) -&gt; str:\n    \"\"\"Get a value from the configuration file.\n\n    Allowed keys are: `XML_FILE`, `DICT_PATH`.\"\"\"\n    config = cls._load()\n    return config.get(key, default)\n</code></pre>"},{"location":"API/settings/#de_wiktio.settings.Settings.set","title":"<code>set(key, value)</code>  <code>classmethod</code>","text":"<p>Set a value in the configuration file.</p> Allowed keys <ul> <li><code>XML_FILE</code>, for path to the XML dump file </li> <li><code>DICT_PATH</code>, for path to the dictionary folder </li> </ul> <p>To delete a value, set it to <code>None</code>.</p> Source code in <code>de_wiktio\\settings.py</code> <pre><code>@classmethod\ndef set(cls, key, value):\n    \"\"\"Set a value in the configuration file.\n\n    Allowed keys: \n        - `XML_FILE`, for path to the XML dump file \n        - `DICT_PATH`, for path to the dictionary folder \n\n    To delete a value, set it to `None`.\n    \"\"\"\n    config = cls._load()\n    config[key] = value\n    cls._save_config(config)\n</code></pre>"}]}